@inject IProductService ProductService
@implements IDisposable 

@{
	var products = ProductService.Products;
	if(products == null || products.Count == 0)
	{
		<span>@ProductService.Message</span>
	}
}

<ul class="list-unstyled">
	@foreach (var product in ProductService.Products)
	{
		<li class="media my-3">
			<div class="media-img-wrapper mr-2">
				<a href="/products/@product.Id">
					<img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
				</a>
			</div>
			<div class="media-body">
				<a href="/products/@product.Id">
					<h4 class="mb-0">@product.Title</h4>
				</a>
				<p>@product.Description</p>
				@GetPriceText(product)
			</div>
		</li>
	}
</ul>

@code {
	protected override void OnInitialized()
	{
		ProductService.ProductsChanges += StateHasChanged;
	}

	public void Dispose()
	{
		ProductService.ProductsChanges -= StateHasChanged;
	}

	private string GetPriceText(Product product){
		var variants = product.Variants;
		if(variants.Count == 0)
		{
			return string.Empty;
		}
		else if(variants.Count == 1)
		{
			return $"{variants[0].Price}";
		}

		decimal minPrice = variants.Min(v => v.Price);
		return $"Starting at ${minPrice}";
	}
}
