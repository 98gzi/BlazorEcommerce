@page "/products/{id:int}"
@inject IProductService ProductService

@if (Product == null)
{
	<span>@Message</span>
}
else
{
	<div class="media">
		<div class="media-img-wrapper mr-2">
			<img class="media-img" src="@Product.ImageUrl" alt="@Product.Title" />
		</div>
		<div class="media-body">
			<a href="#">
				<h2 class="mb-0">@Product.Title</h2>
			</a>
			<p>@Product.Description</p>
			@if(Product.Variants != null && Product.Variants.Count > 1)
			{
				<div class="mb-3">
					<select class="form-select" @bind=currentTypeId>
						@foreach(var variant in Product.Variants)
						{
							<option value="@variant.ProductTypeId">
								@variant.ProductType.Name
							</option>
						}
					</select>
				</div>
			}
			@if(GetSelectedVariant() != null)
			{
				@if(GetSelectedVariant().OriginalPrice > GetSelectedVariant().Price)
				{
					<h6 class="text-muted original-price">
							$@GetSelectedVariant().OriginalPrice
					</h6>
				}
				<h4 class="price">
						$@GetSelectedVariant().Price
				</h4>
			}
		
		</div>
	</div>
}

@code {
	private Product? Product = null;
	private string Message = string.Empty;
	public int currentTypeId = 1;

	[Parameter]
	public int Id { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		Message = "Loading Product...";
		var result = await ProductService.GetProduct(Id);
		if (!result.Success)
		{
			Message = result.Message;
		}
		else
		{
			Product = result.Data;
			if (Product.Variants.Count > 0)
			{
				currentTypeId = Product.Variants[0].ProductTypeId;
			}
		}
	}
	private ProductVariant GetSelectedVariant()
	{
		var variant = Product.Variants.FirstOrDefault(v => v.ProductTypeId == currentTypeId);
		return variant;
	}
}
